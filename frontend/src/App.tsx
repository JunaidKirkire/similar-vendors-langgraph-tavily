import React,{useState} from 'react'
function Trace({trace}){return (<div className='trace'>{trace.map((t,i)=>(<div key={i} className='trace-item'><div className='step'>{t.step}</div><pre>{JSON.stringify(t.detail,null,2)}</pre></div>))}</div>)}
function Result({r}){return (<div className='result'><div className='row'><a className='title' href={r.url} target='_blank' rel='noreferrer'>{r.title||r.domain}</a><div className='score'>Score: {r.score?.toFixed?r.score.toFixed(3):r.score}</div></div>{typeof r.capability_overlap==='number'&&(<div className='score subtle'>Capability match: {(r.capability_overlap*100).toFixed(0)}%</div>)}<div className='snippet'>{r.snippet}</div><div className='ev-list'>{(r.evidence||[]).slice(0,3).map((e,i)=>(<div key={i} className='evidence'><a href={e.url} target='_blank' rel='noreferrer'>{e.title||e.url}</a><div className='snippet'>{(e.text||'').slice(0,220)}…</div></div>))}</div></div>)}
export default function App(){const [url,setUrl]=useState('https://makindevelopers.com');const [simulate,setSim]=useState(true);const [useLLM,setUseLLM]=useState(true);const [data,setData]=useState(null);const [loading,setLoading]=useState(false);async function run(){setLoading(true);try{const r=await fetch('/api/similar',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({url,max_candidates:25,simulate,use_llm:useLLM})});if(!r.ok) throw new Error(await r.text());setData(await r.json())}finally{setLoading(false)}}function downloadJSON(){const blob=new Blob([JSON.stringify(data,null,2)],{type:'application/json'});const u=URL.createObjectURL(blob);const a=document.createElement('a');a.href=u;a.download='similar_vendors.json';a.click();URL.revokeObjectURL(u)}return(<div className='container'><h1>Similar Vendors — LangGraph + Tavily</h1><form className='card' onSubmit={e=>{e.preventDefault();run()}}><input value={url} onChange={e=>setUrl(e.target.value)} placeholder='https://vendor.com'/><label><input type='checkbox' checked={simulate} onChange={e=>setSim(e.target.checked)}/> Stub Tavily (no API key)</label><label><input type='checkbox' checked={useLLM} onChange={e=>setUseLLM(e.target.checked)}/> Use LLM planner</label><button disabled={loading}>{loading?'Scouting…':'Find Similar Vendors'}</button>{data&&<button type='button' onClick={downloadJSON}>Export JSON</button>}</form>{data&&(<div className='card'><h2>Seed vendor</h2><div className='seed'><div><b>Name:</b> {data.seed?.name}</div><div><b>Domain:</b> {data.seed?.domain}</div><div><b>Verticals:</b> {(data.seed?.verticals||[]).join(', ')}</div><div><b>Capabilities:</b> {(data.seed?.capabilities||[]).slice(0,8).join(', ')}</div></div></div>)}{data&&(<div className='card'><h2>Top matches</h2><div className='list'>{data.results.slice(0,12).map((r,i)=>(<Result key={i} r={r}/>))}</div></div>)}{data&&(<div className='card'><h2>Agent Trace (LangGraph)</h2><Trace trace={data.trace||[]}/></div>)}</div>) }
